{"version":3,"sources":["../src/plugins/drawtask.js"],"names":[],"mappings":";;;;;;;AAAA,CAAC,QAAQ;AAAA,KACJ,GAAG,CAAC,MAAM;AAAA,IACX,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,QAAQ,KAAK,KAAK,IAAI,SAAS,EAAE,aAAa,KAAK,gBAAgB,IAAI,MAAM,GAAG,QAAQ,CAAC,WAAW,EAAE,MAAM;AAAA,QAC9H,MAAM;AAAA,YACF,QAAQ,GAAG,CAAC;AAAA,YACZ,OAAO,IAAI,KAAK;AAAA,YAChB,KAAK;AAAA,gBACD,OAAO;AAAA,gBACP,gBAAgB,IAAI,WAAW;AAAA;AAAA,YAEnC,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS;AAAA,gBAC3C,GAAG,CAAC,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG;AAAA;AAAA,gBAE7B,EAAE,EAAE,KAAK,CAAC,OAAO,KAAK,SAAS;AAAA,oBAC3B,KAAK,CAAC,OAAO,GAAG,IAAI;AAAA;AAAA;AAAA,gBAGxB,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,OAAO;AAAA,oBACxE,EAAE,EAAE,aAAa,MAAM,QAAQ;AAAA,wBAC3B,GAAG,CAAC,WAAW,GAAG,QAAQ,CAAC,GAAG;AAAA,4BAC1B,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,UAAU;AAAA,4BACzD,EAAE,EAAE,KAAK,CAAC,OAAO,IAAI,SAAS,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,GAAG,MAAM,CAAC;AAAA,gCAC9D,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;AAAA,gCACvE,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,SAAS;AAAA;AAAA,gCAE9B,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,gBAAgB;AAAA,gCACtC,SAAS,CAAC,IAAI,GAAG,SAAS;AAAA,gCAC1B,SAAS,CAAC,EAAE,GAAG,OAAO;AAAA;AAAA,gCAEtB,GAAG,CAAC,IAAI,GAAG,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS;AAAA,gCAC/C,IAAI,CAAC,UAAU,GAAG,IAAI;AAAA,gCACtB,IAAI,CAAC,gBAAgB;AAAA,gCACrB,cAAc,CAAC,GAAG,CAAC,kBAAkB;AAAA;AAAA,gCAErC,cAAc,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM;AAAA;AAAA;AAAA;AAAA,wBAIzC,OAAO,CAAC,EAAE,EAAE,SAAS,GAAG,WAAW;AAAA,wBACnC,cAAc,CAAC,eAAe,GAAG,WAAW;AAAA;AAAA;AAAA;AAAA,gBAIpD,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,OAAO;AAAA,oBAC5E,EAAE,EAAE,aAAa,MAAM,QAAQ;AAAA,wBAC3B,OAAO,CAAC,GAAG,EAAE,SAAS,GAAG,cAAc,CAAC,eAAe;AAAA,wBACvD,MAAM,CAAC,cAAc,CAAC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"angular-gantt-drawtask-plugin.js","sourcesContent":["(function(){\n    'use strict';\n    angular.module('gantt.drawtask', ['gantt']).directive('ganttDrawTask', ['ganttMouseOffset', 'moment', function(mouseOffset, moment) {\n        return {\n            restrict: 'E',\n            require: '^gantt',\n            scope: {\n                enabled: '=?',\n                taskModelFactory: '=taskFactory'\n            },\n            link: function(scope, element, attrs, ganttCtrl) {\n                var api = ganttCtrl.gantt.api;\n\n                if (scope.enabled === undefined) {\n                    scope.enabled = true;\n                }\n\n                api.directives.on.new(scope, function(directiveName, directiveScope, element) {\n                    if (directiveName === 'ganttRow') {\n                        var drawHandler = function(evt) {\n                            var evtTarget = (evt.target ? evt.target : evt.srcElement);\n                            if (scope.enabled && evtTarget.className.indexOf('gantt-row') > -1) {\n                                var startDate = api.core.getDateByPosition(mouseOffset.getOffset(evt).x);\n                                var endDate = moment(startDate);\n\n                                var taskModel = scope.taskModelFactory();\n                                taskModel.from = startDate;\n                                taskModel.to = endDate;\n\n                                var task = directiveScope.row.addTask(taskModel);\n                                task.isResizing = true;\n                                task.updatePosAndSize();\n                                directiveScope.row.updateVisibleTasks();\n\n                                directiveScope.row.$scope.$digest();\n                            }\n                        };\n\n                        element.on('mousedown', drawHandler);\n                        directiveScope.drawTaskHandler = drawHandler;\n                    }\n                });\n\n                api.directives.on.destroy(scope, function(directiveName, directiveScope, element) {\n                    if (directiveName === 'ganttRow') {\n                        element.off('mousedown', directiveScope.drawTaskHandler);\n                        delete directiveScope.drawTaskHandler;\n                    }\n                });\n            }\n        };\n    }]);\n}());\n\n"]}